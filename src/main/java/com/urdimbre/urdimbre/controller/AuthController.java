package com.urdimbre.urdimbre.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.urdimbre.urdimbre.dto.auth.AuthRequestDTO;
import com.urdimbre.urdimbre.dto.auth.AuthResponseDTO;
import com.urdimbre.urdimbre.dto.auth.RefreshTokenRequestDTO;
import com.urdimbre.urdimbre.dto.user.UserRegisterDTO;
import com.urdimbre.urdimbre.dto.user.UserResponseDTO;
import com.urdimbre.urdimbre.exception.BadRequestException;
import com.urdimbre.urdimbre.service.auth.AuthService;
import com.urdimbre.urdimbre.service.invite.InviteCodeService;
import com.urdimbre.urdimbre.service.token.BlacklistedTokenService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {

    private static final Logger logger = LoggerFactory.getLogger(AuthController.class);

    private final AuthService authService;
    private final InviteCodeService inviteCodeService;
    private final BlacklistedTokenService blacklistedTokenService;

    /**
     * üìù Registro de usuario CON C√ìDIGO DE INVITACI√ìN DIN√ÅMICO
     */
    @PostMapping("/register")
    public ResponseEntity<UserResponseDTO> register(@Valid @RequestBody UserRegisterDTO request) {
        logger.info("üîê Intento de registro para usuario: {}", request.getUsername());

        try {
            // üéüÔ∏è VALIDAR C√ìDIGO DE INVITACI√ìN ANTES DEL REGISTRO
            // ‚úÖ CAMBIO: Solo validar, no usar aqu√≠ (AuthService lo usar√° despu√©s)
            if (!inviteCodeService.validateInviteCode(request.getInviteCode())) {
                throw new BadRequestException("C√≥digo de invitaci√≥n inv√°lido, expirado o agotado");
            }

            // üîê VALIDACIONES ADICIONALES DE SEGURIDAD
            validateRegistrationData(request);

            // üìù PROCEDER CON EL REGISTRO (AuthService validar√° y usar√° el c√≥digo)
            UserResponseDTO response = authService.register(request);

            logger.info("‚úÖ Usuario registrado exitosamente: {}", request.getUsername());
            return ResponseEntity.ok(response);

        } catch (BadRequestException e) {
            logger.warn("‚ùå Error en registro para {}: {}", request.getUsername(), e.getMessage());
            throw e;
        } catch (Exception e) {
            logger.error("‚ùå Error inesperado en registro para {}: {}", request.getUsername(), e.getMessage());
            throw new BadRequestException("Error interno del servidor");
        }
    }

    /**
     * üîë Login de usuario
     */
    @PostMapping("/login")
    public ResponseEntity<AuthResponseDTO> login(@Valid @RequestBody AuthRequestDTO request) {
        logger.info("üîë Intento de login para: {}", request.getUsername());

        try {
            // üîê VALIDACIONES DE SEGURIDAD
            validateLoginData(request);

            // üîë PROCEDER CON EL LOGIN
            AuthResponseDTO response = authService.login(request);

            logger.info("‚úÖ Login exitoso para usuario: {}", request.getUsername());
            return ResponseEntity.ok(response);

        } catch (BadCredentialsException e) {
            logger.warn("‚ùå Credenciales inv√°lidas para: {}. Detalle: {}", request.getUsername(), e.getMessage(), e);
            throw new BadCredentialsException(
                    "Credenciales inv√°lidas para usuario: " + request.getUsername() + ". Detalle: " + e.getMessage(),
                    e);
        } catch (Exception e) {
            logger.error("‚ùå Error inesperado en login para {}: {}", request.getUsername(), e.getMessage(), e);
            throw new BadCredentialsException("Error interno del servidor para usuario: " + request.getUsername()
                    + ". Detalle: " + e.getMessage(), e);
        }
    }

    /**
     * üîÑ Renovar token de acceso
     */
    @PostMapping("/refresh")
    public ResponseEntity<AuthResponseDTO> refreshToken(@Valid @RequestBody RefreshTokenRequestDTO request) {
        logger.info("üîÑ Intento de renovaci√≥n de token");

        try {
            // üîê VALIDAR REFRESH TOKEN
            if (request.getRefreshToken() == null || request.getRefreshToken().trim().isEmpty()) {
                throw new BadCredentialsException("Refresh token es requerido");
            }

            // üö´ VERIFICAR QUE NO EST√â EN BLACKLIST
            if (blacklistedTokenService.isTokenBlacklisted(request.getRefreshToken())) {
                logger.warn("‚ùå Intento de usar refresh token en blacklist");
                throw new BadCredentialsException("Token inv√°lido");
            }

            // üîÑ PROCEDER CON LA RENOVACI√ìN
            AuthResponseDTO response = authService.refreshToken(request.getRefreshToken());

            logger.info("‚úÖ Token renovado exitosamente para usuario: {}", response.getUsername());
            return ResponseEntity.ok(response);

        } catch (BadCredentialsException e) {
            logger.warn("‚ùå Refresh token inv√°lido: {}", e.getMessage());
            throw new BadCredentialsException("Refresh token inv√°lido: " + e.getMessage());
        } catch (Exception e) {
            logger.error("‚ùå Error inesperado en renovaci√≥n de token: {}", e.getMessage());
            throw new BadCredentialsException("Error interno del servidor durante la renovaci√≥n de token");
        }
    }

    /**
     * üö™ Cerrar sesi√≥n CON BLACKLIST
     */
    @PostMapping("/logout")
    public ResponseEntity<String> logout(HttpServletRequest request, HttpServletResponse response) {
        try {
            String username = SecurityContextHolder.getContext().getAuthentication().getName();
            logger.info("üö™ Intento de logout para usuario: {}", username);

            // üö´ AGREGAR TOKENS A BLACKLIST
            addTokensToBlacklist(request, username);

            // üö™ PROCEDER CON EL LOGOUT
            authService.logout(request, response);

            // üßπ LIMPIAR CONTEXTO DE SEGURIDAD
            SecurityContextHolder.clearContext();

            logger.info("‚úÖ Logout exitoso para usuario: {}", username);
            return ResponseEntity.ok("Sesi√≥n cerrada exitosamente");

        } catch (Exception e) {
            logger.error("‚ùå Error en logout: {}", e.getMessage());
            return ResponseEntity.status(org.springframework.http.HttpStatus.OK).body("Sesi√≥n cerrada"); // Siempre
                                                                                                         // confirmar
                                                                                                         // logout por
                                                                                                         // seguridad
        }
    }

    // ================================
    // ‚úÖ NUEVOS ENDPOINTS P√öBLICOS PARA C√ìDIGOS DE INVITACI√ìN
    // ================================

    /**
     * ‚úÖ Validar c√≥digo de invitaci√≥n (P√öBLICO - para frontend)
     * Este endpoint NO requiere autenticaci√≥n
     */
    @GetMapping("/invite-codes/validate")
    public ResponseEntity<Boolean> validateInviteCodePublic(@RequestParam String code) {
        logger.debug("‚úÖ Validando c√≥digo de invitaci√≥n p√∫blico: {}", code);

        if (code == null || code.trim().isEmpty()) {
            return ResponseEntity.ok(false);
        }

        try {
            boolean isValid = inviteCodeService.validateInviteCode(code);
            logger.debug("‚úÖ C√≥digo {} es v√°lido: {}", code, isValid);
            return ResponseEntity.ok(isValid);
        } catch (Exception e) {
            logger.warn("‚ùå Error validando c√≥digo {}: {}", code, e.getMessage());
            return ResponseEntity.ok(false);
        }
    }

    /**
     * ‚ÑπÔ∏è Obtener informaci√≥n b√°sica del c√≥digo (sin datos sensibles)
     * √ötil para mostrar al usuario si el c√≥digo es v√°lido antes del registro
     */
    @GetMapping("/invite-codes/info")
    public ResponseEntity<InviteCodePublicInfo> getInviteCodeInfo(@RequestParam String code) {
        logger.debug("‚ÑπÔ∏è Obteniendo info p√∫blica del c√≥digo: {}", code);

        if (code == null || code.trim().isEmpty()) {
            return ResponseEntity.ok(InviteCodePublicInfo.builder()
                    .valid(false)
                    .message("C√≥digo requerido")
                    .build());
        }

        try {
            // Validar que el c√≥digo existe y est√° activo
            boolean isValid = inviteCodeService.validateInviteCode(code);

            if (!isValid) {
                return ResponseEntity.ok(InviteCodePublicInfo.builder()
                        .valid(false)
                        .message("C√≥digo inv√°lido o expirado")
                        .build());
            }

            return ResponseEntity.ok(InviteCodePublicInfo.builder()
                    .valid(true)
                    .message("C√≥digo v√°lido")
                    .build());

        } catch (Exception e) {
            logger.warn("‚ùå Error obteniendo info del c√≥digo {}: {}", code, e.getMessage());
            return ResponseEntity.status(org.springframework.http.HttpStatus.BAD_REQUEST).body(
                    InviteCodePublicInfo.builder()
                            .valid(false)
                            .message("Error validando c√≥digo")
                            .build());
        }
    }

    // ================================
    // M√âTODOS PRIVADOS
    // ================================

    /**
     * üö´ Agregar tokens a blacklist durante logout
     */
    private void addTokensToBlacklist(HttpServletRequest request, String username) {
        try {
            // üé´ OBTENER ACCESS TOKEN DEL HEADER
            String authHeader = request.getHeader("Authorization");
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String accessToken = authHeader.substring(7);
                blacklistedTokenService.blacklistToken(
                        accessToken, username, "access",
                        java.time.LocalDateTime.now().plusMinutes(15),
                        "Logout manual");
            }

            // üîÑ OBTENER REFRESH TOKEN
            String refreshToken = request.getHeader("Refresh-Token");
            if (refreshToken != null && !refreshToken.trim().isEmpty()) {
                blacklistedTokenService.blacklistToken(
                        refreshToken, username, "refresh",
                        java.time.LocalDateTime.now().plusDays(7),
                        "Logout manual");
            }

            logger.debug("üö´ Tokens agregados a blacklist para usuario: {}", username);

        } catch (Exception e) {
            logger.warn("‚ö†Ô∏è Error agregando tokens a blacklist: {}", e.getMessage());
        }
    }

    /**
     * üîç Validar datos de registro
     */
    private void validateRegistrationData(UserRegisterDTO request) {
        validateUsername(request.getUsername());
        validateEmail(request.getEmail());
        validatePassword(request.getPassword());
        validateFullName(request.getFullName());
        validateInviteCode(request.getInviteCode());
    }

    private void validateUsername(String username) {
        if (username == null || username.trim().length() < 3) {
            throw new BadRequestException("El username debe tener al menos 3 caracteres");
        }
        if (username.length() > 50) {
            throw new BadRequestException("El username no puede tener m√°s de 50 caracteres");
        }
        if (!username.matches("^[a-zA-Z0-9_.-]+$")) {
            throw new BadRequestException(
                    "El username solo puede contener letras, n√∫meros, puntos, guiones y guiones bajos");
        }
    }

    private void validateEmail(String email) {
        if (email == null || !isValidEmail(email)) {
            throw new BadRequestException("Email inv√°lido");
        }
        if (email.length() > 100) {
            throw new BadRequestException("Email demasiado largo");
        }
    }

    private void validatePassword(String password) {
        if (password == null || password.length() < 8) {
            throw new BadRequestException("La contrase√±a debe tener al menos 8 caracteres");
        }
        if (password.length() > 128) {
            throw new BadRequestException("La contrase√±a no puede tener m√°s de 128 caracteres");
        }
        if (!isPasswordSecure(password)) {
            throw new BadRequestException(
                    "La contrase√±a debe contener al menos una may√∫scula, una min√∫scula, un n√∫mero y un s√≠mbolo");
        }
    }

    private void validateFullName(String fullName) {
        if (fullName == null || fullName.trim().length() < 2) {
            throw new BadRequestException("El nombre completo debe tener al menos 2 caracteres");
        }
        if (fullName.length() > 100) {
            throw new BadRequestException("El nombre completo no puede tener m√°s de 100 caracteres");
        }
    }

    private void validateInviteCode(String inviteCode) {
        if (inviteCode == null || inviteCode.trim().isEmpty()) {
            throw new BadRequestException("C√≥digo de invitaci√≥n es obligatorio");
        }
    }

    /**
     * üîç Validar datos de login
     */
    private void validateLoginData(AuthRequestDTO request) {
        // ‚úÖ VALIDAR USERNAME/EMAIL
        if (request.getUsername() == null || request.getUsername().trim().isEmpty()) {
            throw new BadCredentialsException("Username o email es requerido");
        }

        if (request.getUsername().length() > 100) {
            throw new BadCredentialsException("Username/email demasiado largo");
        }

        // ‚úÖ VALIDAR CONTRASE√ëA
        if (request.getPassword() == null || request.getPassword().trim().isEmpty()) {
            throw new BadCredentialsException("Contrase√±a es requerida");
        }

        if (request.getPassword().length() > 128) {
            throw new BadCredentialsException("Contrase√±a demasiado larga");
        }
    }

    /**
     * üìß Validar formato de email
     */
    private boolean isValidEmail(String email) {
        return email != null && email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$");
    }

    /**
     * üîê Validar que la contrase√±a sea segura
     */
    private boolean isPasswordSecure(String password) {
        if (password == null || password.length() < 8) {
            return false;
        }

        boolean hasLower = password.chars().anyMatch(Character::isLowerCase);
        boolean hasUpper = password.chars().anyMatch(Character::isUpperCase);
        boolean hasDigit = password.chars().anyMatch(Character::isDigit);
        boolean hasSymbol = password.chars().anyMatch(ch -> "@$!%*?&".indexOf(ch) >= 0);

        return hasLower && hasUpper && hasDigit && hasSymbol;
    }

    // ================================
    // DTO INTERNO PARA INFORMACI√ìN P√öBLICA
    // ================================

    @lombok.Builder
    @lombok.Data
    public static class InviteCodePublicInfo {
        private boolean valid;
        private String message;
        // Podr√≠as agregar m√°s campos como:
        // private Integer remainingUses;
        // private Long hoursUntilExpiration;
    }
}